# This configuration file for Apache is mostly similar to the nginx example
# configuration file.
# Notable differences are:
# - Assets aren't marked as immutable (but still have a 1y expire)
# - No cache has been configured -- assuming that serving assets directly is
#   good enough.
# - no websocket is configured to the server on port 3000 -- I was assuming this
#   isn't used, but maybe it's not true.
# - The header X-Real-IP isn't added but X-Forwarded-For is, is it enough?
#
# Prerequisites:
# Run: a2enmod expires proxy_http proxy_wstunnel rewrite headers deflate socache_shmcb

# Copy paste the last part of Mozilla recommendation to configure TLS in your main config:
# https://ssl-config.mozilla.org/#server=apache&version=2.4.41&config=intermediate&openssl=1.1.1d&guideline=5.4
#
# You can also update the default deflate using something like this in your main
# config:
# <IfModule mod_deflate.c>
#   AddOutputFilterByType DEFLATE application/json
# </IfModule>


<VirtualHost *:80>
  ServerAdmin email@example.org
  ServerName  example.org

  RedirectPermanent / https://example.org/

  ErrorLog ${APACHE_LOG_DIR}/example.org-error.log

  # Possible values include: debug, info, notice, warn, error, crit,
  # alert, emerg.
  LogLevel warn

  CustomLog ${APACHE_LOG_DIR}/example.org-access.log combined
</VirtualHost>


<IfModule mod_ssl.c>
<VirtualHost *:443>
  ServerAdmin email@example.org
  ServerName  example.org

  ErrorLog ${APACHE_LOG_DIR}/example.org-ssl_error.log

  # Possible values include: debug, info, notice, warn, error, crit,
  # alert, emerg.
  LogLevel warn

  # Combined is defined like this in the main apache.conf file:
  # LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined

  CustomLog ${APACHE_LOG_DIR}/example.org-ssl_access.log combined

  DocumentRoot /home/mastodon/live/public
  Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"

  # 80MB
  LimitRequestBody 83886080

  # LetsEncrypt
  # You may have to configure this differently depending on your local setup
  Alias "/.well-known/acme-challenge/" "/opt/mastodon/.well-known/acme-challenge/"
  <Directory /opt/mastodon/.well-known/acme-challenge>
    Require all granted  
  </Directory>

  # Additional configuration
  <Directory /home/mastodon/live/public>
    Require all granted
  </Directory>

  RewriteEngine On
  # Serve local files if present, but otherwise proxy them
  RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_URI} !/acme-challenge/
  RewriteCond %{REQUEST_URI} !^/api/v1/streaming
  RewriteRule ^/(.*)$ http://127.0.0.1:3000%{REQUEST_URI} [P,L]
  # Add some more needed headers
  RequestHeader set X-Forwarded-Proto expr=%{REQUEST_SCHEME}

  # WebSocket proxy
  ProxyPass "/api/v1/streaming" "ws://127.0.0.1:4000"

  ErrorDocument 500 /500.html
  ErrorDocument 501 /500.html
  ErrorDocument 502 /500.html
  ErrorDocument 503 /500.html
  ErrorDocument 504 /500.html

  <LocationMatch "^/(emoji|packs|system/accounts/avatars|system/media_attachments/files)">
    ExpiresActive on
    ExpiresDefault "access plus 1 year"
  </LocationMatch>

  <Location "/sw.js">
    ExpiresActive on
    ExpiresDefault "access"
  </Location>

  #   SSL Engine Switch:
  #   Enable/Disable SSL for this virtual host.
  SSLEngine on

  # Specify here the paths to letsencrypt's certificate.
  #   If both key and certificate are stored in the same file, only the
  #   SSLCertificateFile directive is needed.
  SSLCertificateFile    /etc/ssl/private/fullchain.pem
  SSLCertificateKeyFile /etc/ssl/private/key.pem

  #   SSL Protocol Adjustments:
  #   The safe and default but still SSL/TLS standard compliant shutdown
  #   approach is that mod_ssl sends the close notify alert but doesn't wait for
  #   the close notify alert from client. When you need a different shutdown
  #   approach you can use one of the following variables:
  #   o ssl-unclean-shutdown:
  #     This forces an unclean shutdown when the connection is closed, i.e. no
  #     SSL close notify alert is send or allowed to received.  This violates
  #     the SSL/TLS standard but is needed for some brain-dead browsers. Use
  #     this when you receive I/O errors because of the standard approach where
  #     mod_ssl sends the close notify alert.
  #   o ssl-accurate-shutdown:
  #     This forces an accurate shutdown when the connection is closed, i.e. a
  #     SSL close notify alert is send and mod_ssl waits for the close notify
  #     alert of the client. This is 100% SSL/TLS standard compliant, but in
  #     practice often causes hanging connections with brain-dead browsers. Use
  #     this only for browsers where you know that their SSL implementation
  #     works correctly.
  #   Notice: Most problems of broken clients are also related to the HTTP
  #   keep-alive facility, so you usually additionally want to disable
  #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
  #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
  #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
  #   "force-response-1.0" for this.
  # MSIE 7 and newer should be able to use keepalive
  BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
</VirtualHost>
</IfModule>
